from typing import List

import numpy
import pytest
from numpy.testing import assert_almost_equal
from thinc.api import Model, data_validation, get_current_ops
from thinc.types import Array2d, Ragged

from spacy.lang.en import English
from spacy.ml import FeatureExtractor, StaticVectors
from spacy.ml._character_embed import CharacterEmbed
from spacy.tokens import Doc
from spacy.vocab import Vocab
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, clear_mappers
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime, timezone
from fastapi import FastAPI, Request
from fastapi.testclient import TestClient
from unittest.mock import MagicMock
from api.models import UserActivity
from api.crud import analytics

OPS = get_current_ops()

texts = ["These are 4 words", "Here just three"]
l0 = [[1, 2], [3, 4], [5, 6], [7, 8]]
l1 = [[9, 8], [7, 6], [5, 4]]
list_floats = [OPS.xp.asarray(l0, dtype="f"), OPS.xp.asarray(l1, dtype="f")]
list_ints = [OPS.xp.asarray(l0, dtype="i"), OPS.xp.asarray(l1, dtype="i")]
array = OPS.xp.asarray(l1, dtype="f")
ragged = Ragged(array, OPS.xp.asarray([2, 1], dtype="i"))


def get_docs():
    vocab = Vocab()
    for t in texts:
        for word in t.split():
            hash_id = vocab.strings.add(word)
            vector = numpy.random.uniform(-1, 1, (7,))
            vocab.set_vector(hash_id, vector)
    docs = [English(vocab)(t) for t in texts]
    return docs


# Test components with a model of type Model[List[Doc], List[Floats2d]]
@pytest.mark.parametrize("name", ["tagger", "tok2vec", "morphologizer", "senter"])
def test_components_batching_list(name):
    nlp = English()
    proc = nlp.create_pipe(name)
    util_batch_unbatch_docs_list(proc.model, get_docs(), list_floats)


# Test components with a model of type Model[List[Doc], Floats2d]
@pytest.mark.parametrize("name", ["textcat"])
def test_components_batching_array(name):
    nlp = English()
    proc = nlp.create_pipe(name)
    util_batch_unbatch_docs_array(proc.model, get_docs(), array)


LAYERS = [
    (CharacterEmbed(nM=5, nC=3), get_docs(), list_floats),
    (FeatureExtractor([100, 200]), get_docs(), list_ints),
    (StaticVectors(), get_docs(), ragged),
]


@pytest.mark.parametrize("model,in_data,out_data", LAYERS)
def test_layers_batching_all(model, in_data, out_data):
    # In = List[Doc]
    if isinstance(in_data, list) and isinstance(in_data[0], Doc):
        if isinstance(out_data, OPS.xp.ndarray) and out_data.ndim == 2:
            util_batch_unbatch_docs_array(model, in_data, out_data)
        elif (
            isinstance(out_data, list)
            and isinstance(out_data[0], OPS.xp.ndarray)
            and out_data[0].ndim == 2
        ):
            util_batch_unbatch_docs_list(model, in_data, out_data)
        elif isinstance(out_data, Ragged):
            util_batch_unbatch_docs_ragged(model, in_data, out_data)
            Base = declarative_base()

            @pytest.fixture(scope="function")
            def db_session():
                engine = create_engine("sqlite:///:memory:")
                Base.metadata.create_all(bind=engine)
                TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
                session = TestingSessionLocal()
                yield session
                session.close()
                clear_mappers()

            def test_user_activity_creation(db_session):
                activity = UserActivity(
                    activity_type="visit",
                    page="/home",
                    ip_address="127.0.0.1",
                    user_agent="pytest-agent",
                    announcement_id=None,
                    service_id=None,
                    timestamp=datetime.now(timezone.utc)
                )
                db_session.add(activity)
                db_session.commit()
                result = db_session.query(UserActivity).first()
                assert result is not None
                assert result.activity_type == "visit"
                assert result.page == "/home"
                assert result.ip_address == "127.0.0.1"
                assert result.user_agent == "pytest-agent"
                assert result.announcement_id is None
                assert result.service_id is None
                assert isinstance(result.timestamp, datetime)

            def test_user_activity_nullable_fields(db_session):
                activity = UserActivity(activity_type="click")
                db_session.add(activity)
                db_session.commit()
                result = db_session.query(UserActivity).first()
                assert result.page is None
                assert result.ip_address is None
                assert result.user_agent is None
                assert result.announcement_id is None
                assert result.service_id is None

            def test_user_activity_default_timestamp(db_session):
                activity = UserActivity(activity_type="visit")
                db_session.add(activity)
                db_session.commit()
                result = db_session.query(UserActivity).first()
                assert isinstance(result.timestamp, datetime)
                # Should be within a few seconds of now
                assert abs((datetime.now(timezone.utc) - result.timestamp).total_seconds()) < 10

            def test_track_visit_creates_activity(monkeypatch, db_session):
                app = FastAPI()
                @app.post("/track-visit")
                def track_visit_endpoint(request: Request):
                    return analytics.track_visit(request, page="/test", db=db_session)
                client = TestClient(app)
                # Patch request.client.host
                class DummyClient:
                    host = "1.2.3.4"
                def dummy_request(*args, **kwargs):
                    req = MagicMock()
                    req.client = DummyClient()
                    req.headers = {"user-agent": "test-agent"}
                    return req
                monkeypatch.setattr("fastapi.Request", dummy_request)
                response = client.post("/track-visit")
                assert response.status_code == 200
                assert response.json()["status"] == "success"
                activity = db_session.query(UserActivity).first()
                assert activity is not None
                assert activity.page == "/test"
                assert activity.ip_address == "1.2.3.4"
                assert activity.user_agent == "test-agent"
                assert activity.activity_type == "visit"

def util_batch_unbatch_docs_list(
    model: Model[List[Doc], List[Array2d]], in_data: List[Doc], out_data: List[Array2d]
):
    with data_validation(True):
        model.initialize(in_data, out_data)
        Y_batched = model.predict(in_data)
        Y_not_batched = [model.predict([u])[0] for u in in_data]
        for i in range(len(Y_batched)):
            assert_almost_equal(
                OPS.to_numpy(Y_batched[i]), OPS.to_numpy(Y_not_batched[i]), decimal=4
            )


def util_batch_unbatch_docs_array(
    model: Model[List[Doc], Array2d], in_data: List[Doc], out_data: Array2d
):
    with data_validation(True):
        model.initialize(in_data, out_data)
        Y_batched = model.predict(in_data).tolist()
        Y_not_batched = [model.predict([u])[0].tolist() for u in in_data]
        assert_almost_equal(Y_batched, Y_not_batched, decimal=4)


def util_batch_unbatch_docs_ragged(
    model: Model[List[Doc], Ragged], in_data: List[Doc], out_data: Ragged
):
    with data_validation(True):
        model.initialize(in_data, out_data)
        Y_batched = model.predict(in_data).data.tolist()
        Y_not_batched = []
        for u in in_data:
            Y_not_batched.extend(model.predict([u]).data.tolist())
        assert_almost_equal(Y_batched, Y_not_batched, decimal=4)
